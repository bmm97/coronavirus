<html>
  <head>
    <title>CORONAVIRUS CASES</title>
      <script src="https://d3js.org/d3.v5.min.js"></script>
      <script src="https://d3js.org/topojson.v2.min.js"></script>
      <link href="https://fonts.googleapis.com/css?family=Abril+Fatface|Oswald&display=swap" rel="stylesheet">
      <style>
        .outline {
          stroke: white;
          stroke-width: 1px;
          fill: none;
        }
        html{
          background-color: #cc4778;
        }
        svg{
          margin: 20pt auto;
          display: block;
  
        }
        h2{
          font-size: 30pt;
          margin: 15;
          color: #f0f921;
          text-align: center;
          filter: drop-shadow(2px -1px #0d0887) sepia(30%);
          font-family: 'Abril Fatface', cursive;
        }
        h3{
          font-size: 15pt;
          margin: 15;
          color: #f0f921;
          text-align: center;
          filter: drop-shadow(2px -1px #0d0887) sepia(30%);
          font-family: 'Abril Fatface', cursive;
        }

        p{
          margin: 15;
          color: #f0f921;
          text-align: center;
          filter: drop-shadow(1px -.5px #0d0887) sepia(30%);
          font-family: 'Oswald', sans-serif;
        }
        .colorbar_axis{
          color: white;
        }
        a{
          color: #f0f921;
          font-family: 'Oswald', sans-serif;
        }
      </style>
  </head>
  <body>
  
    <h2>CORONAVIRUS CASES BY STATE</h2>
    <svg id="usmap" height="380" width="600" ></svg>
    <svg id="colorLegend" height="60" width="600" ></svg>
    <p id = "date"></p>
  
    <script>
    
    //source: https://observablehq.com/@d3/color-schemes
    colors = ["#0d0887","#100788","#130789","#16078a","#19068c","#1b068d","#1d068e","#20068f","#220690","#240691","#260591","#280592","#2a0593","#2c0594","#2e0595",
                "#2f0596","#310597","#330597","#350498","#370499","#38049a","#3a049a","#3c049b","#3e049c","#3f049c","#41049d","#43039e","#44039e","#46039f","#48039f",
                "#4903a0","#4b03a1","#4c02a1","#4e02a2","#5002a2","#5102a3","#5302a3","#5502a4","#5601a4","#5801a4","#5901a5","#5b01a5","#5c01a6","#5e01a6","#6001a6",
                "#6100a7","#6300a7","#6400a7","#6600a7","#6700a8","#6900a8","#6a00a8","#6c00a8","#6e00a8","#6f00a8","#7100a8","#7201a8","#7401a8","#7501a8","#7701a8",
                "#7801a8","#7a02a8","#7b02a8","#7d03a8","#7e03a8","#8004a8","#8104a7","#8305a7","#8405a7","#8606a6","#8707a6","#8808a6","#8a09a5","#8b0aa5","#8d0ba5",
                "#8e0ca4","#8f0da4","#910ea3","#920fa3","#9410a2","#9511a1","#9613a1","#9814a0","#99159f","#9a169f","#9c179e","#9d189d","#9e199d","#a01a9c","#a11b9b",
                "#a21d9a","#a31e9a","#a51f99","#a62098","#a72197","#a82296","#aa2395","#ab2494","#ac2694","#ad2793","#ae2892","#b02991","#b12a90","#b22b8f","#b32c8e",
                "#b42e8d","#b52f8c","#b6308b","#b7318a","#b83289","#ba3388","#bb3488","#bc3587","#bd3786","#be3885","#bf3984","#c03a83","#c13b82","#c23c81","#c33d80",
                "#c43e7f","#c5407e","#c6417d","#c7427c","#c8437b","#c9447a","#ca457a","#cb4679","#cc4778","#cc4977","#cd4a76","#ce4b75","#cf4c74","#d04d73","#d14e72",
                "#d24f71","#d35171","#d45270","#d5536f","#d5546e","#d6556d","#d7566c","#d8576b","#d9586a","#da5a6a","#da5b69","#db5c68","#dc5d67","#dd5e66","#de5f65",
                "#de6164","#df6263","#e06363","#e16462","#e26561","#e26660","#e3685f","#e4695e","#e56a5d","#e56b5d","#e66c5c","#e76e5b","#e76f5a","#e87059","#e97158",
                "#e97257","#ea7457","#eb7556","#eb7655","#ec7754","#ed7953","#ed7a52","#ee7b51","#ef7c51","#ef7e50","#f07f4f","#f0804e","#f1814d","#f1834c","#f2844b",
                "#f3854b","#f3874a","#f48849","#f48948","#f58b47","#f58c46","#f68d45","#f68f44","#f79044","#f79143","#f79342","#f89441","#f89540","#f9973f","#f9983e",
                "#f99a3e","#fa9b3d","#fa9c3c","#fa9e3b","#fb9f3a","#fba139","#fba238","#fca338","#fca537","#fca636","#fca835","#fca934","#fdab33","#fdac33","#fdae32",
                "#fdaf31","#fdb130","#fdb22f","#fdb42f","#fdb52e","#feb72d","#feb82c","#feba2c","#febb2b","#febd2a","#febe2a","#fec029","#fdc229","#fdc328","#fdc527",
                "#fdc627","#fdc827","#fdca26","#fdcb26","#fccd25","#fcce25","#fcd025","#fcd225","#fbd324","#fbd524","#fbd724","#fad824","#fada24","#f9dc24","#f9dd25",
                "#f8df25","#f8e125","#f7e225","#f7e425","#f6e626","#f6e826","#f5e926","#f5eb27","#f4ed27","#f3ee27","#f3f027","#f2f227","#f1f426","#f1f525","#f0f724","#f0f921"]

    const svg = d3.select("#usmap");
    const width = svg.attr("width");
    const height = svg.attr("height");
    const margin = { top: 0, right: 20, bottom: 20, left:20};
    const mapWidth = width - margin.left - margin.right;
    const mapHeight = height - margin.top - margin.bottom;
    const map = svg.append("g").attr("transform","translate("+margin.left+","+margin.top+")");    
    
    const requestData = async function() {
      const us = await d3.json("./datasets/us.json");    
      var states = topojson.feature(us, us.objects.states);
      var statesMesh = topojson.mesh(us, us.objects.states);
      var projection = d3.geoAlbersUsa().fitSize([mapWidth, mapHeight], states);
      var path = d3.geoPath().projection(projection);

      map.selectAll("path.state").data(states.features)
        .join("path")
        .attr("class", "state")
        .attr("note", d => d.id)
        .attr("d", path);
      map.append("path").datum(statesMesh)
        .attr("class","outline")
        .attr("d", path);
  
    const stateData = await d3.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv");
    const countyData = await d3.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv");
    var stateIDs = await d3.tsv("./datasets/us-state-names.tsv");

    var states = [];
    for(x = 0; x<stateData.length; x++){
      z = 0;
      for(y = 0; y<states.length; y++){
        if (stateData[x]['state'] != states[y]) {
          z = z + 1;
        } 
      }
      if (z == states.length) {
          states.push(stateData[x]['state']);
      }
    }
    states.sort();
    let stateCounts = {};
    let idToState = {};
    states.forEach( row => {
      stateCounts[row] = 0;
      idToState[row.id] = row.name;
    });
    stateIDs.forEach( row => {
      stateCounts[row.name] = 0;
      idToState[row.id] = row.name;
    });
    coronaCounts = [];
    for(k = 0; k < states.length; k++){
      coronaCounts.push({"state":states[k],"count":0});
    }
    
    data_date = countyData[countyData.length-1]['date'];
    data_date_day = Number(data_date.substring(8,10));
    data_date_month = Number(data_date.substring(5,7));
    data_full_date = [data_date_day, data_date_month];

    all_months = [null,"January","February","March","April","May","June","July","August","September","October","November","December"];

    print_date_info = [all_months[data_date_month],data_date_day,2020];
    document.getElementById("date").innerHTML = "Data is updated to <em><u>" + print_date_info[0] + " " + print_date_info[1] + " " + print_date_info[2] + 
      "</u></em>. Made by Ben Mayer using notes from INFO3300 at Cornell University. Hover over states for specific counts. Data can be found at <a href= https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html>https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html";
;

    for(j = 0; j < countyData.length; j++){
      for(i = 0; i < coronaCounts.length; i++){
        if (countyData[j]['state'] == coronaCounts[i]['state']){
          countyData_date = countyData[j]['date'];
          countyData_date_day = Number(countyData_date.substring(8,10));
          countyData_date_month = Number(countyData_date.substring(5,7));
          countyData_full_date = [countyData_date_day, countyData_date_month];
          if (countyData_full_date[0] == data_full_date[0] && countyData_full_date[1] == data_full_date[1]) {
            coronaCounts[i]['count'] = coronaCounts[i]['count'] + Number(countyData[j]['cases']);
          }
        }
      }
    }
    for(m = 0; m < coronaCounts.length; m++){
      stateCounts[coronaCounts[m]['state']] = coronaCounts[m]['count'];
    }
    
    const minMax = d3.extent(stateIDs, d => stateCounts[d.name] );
    const colorScale = d3.scaleSequential(d3.interpolatePlasma).domain(minMax);
    map.selectAll(".state")
       .style("fill", d => colorScale( stateCounts[ idToState[d.id] ]) );
    drawLegend(d3.select("#colorLegend"), colorScale);
    
    let ttWidth = 100;
    let toolTip = map.append("g").attr("class","toolTip").attr("visibility","hidden");
    toolTip.append("rect").attr("fill", "black").attr("opacity", 0.5).attr("width",ttWidth-5).attr("height",40)
    let state_id = toolTip.append("text").attr("fill", "white").attr("text-anchor","middle").attr("alignment-baseline","hanging").attr("x", ttWidth / 2.0).attr("y", 2);
    let state_count = toolTip.append("text").attr("fill", "white").attr("text-anchor","middle").attr("alignment-baseline","hanging").attr("x", ttWidth / 2.0).attr("y", 22);
    
    d3.selectAll(".state").on("mouseenter", mouseEntersPlot);
    d3.selectAll(".state").on("mouseout",  mouseLeavesPlot);

    //function rewritten from INFO3300 at Cornell University
    function mouseEntersPlot() {
      toolTip.style("visibility","visible")
      let state = d3.select(this);
      state.attr("stroke","white")
           .attr("stroke-width", 3);
      state_id.text(idToState[ state.datum().id  ]);
      state_count.text(stateCounts[ idToState[ state.datum().id  ] ]);
      let bounds = path.bounds( state.datum() );   
      let xPos = (bounds[0][0]+bounds[1][0])/2.0 - ttWidth/2.0;
      let yPos = bounds[1][1];
      toolTip.attr("transform","translate("+xPos+","+yPos+")"); 
    }

    //function rewritten from INFO3300 at Cornell University
    function mouseLeavesPlot() {
      toolTip.style("visibility","hidden");
      let state = d3.select(this);
      state.attr("stroke","none").attr("stroke-width", 0);
    }
    };
    requestData();

    </script>
    <script>
    
    //function modified from INFO3300 at Cornell University
    function drawLegend(legend, legendColorScale) {
      const legendWidth = legend.attr("width");
      const legendHeight = legend.attr("height");
      const legendMinMax = d3.extent(legendColorScale.domain()); 
      const barHeight = 25;
      const stepSize = 4; 
      const pixelScale = d3.scaleLinear().domain([0,legendWidth-40]).range([legendMinMax[0]-1,legendMinMax[1]+1]); 
      const barScale = d3.scaleLinear().domain([legendMinMax[0]-1,legendMinMax[1]+1]).range([0,legendWidth-40]);
      const barAxis = d3.axisBottom(barScale);
      if (legendColorScale.hasOwnProperty('quantiles')) {
        barAxis.tickValues(legendColorScale.quantiles().concat( legendMinMax ));
      }
      legend.append("rect")
          .attr("x", 20)
          .attr("y", 4)
          .attr("width", legendWidth-40 )
          .attr("height", 1 )
          .style("fill", "white" );       
      legend.append("rect")
          .attr("x", 20)
          .attr("y", barHeight+5)
          .attr("width", legendWidth-40 )
          .attr("height", 1 )
          .style("fill", "white" ); 
      legend.append("g")
        .attr("class", "colorbar_axis")
        .attr("transform","translate("+(20)+","+(barHeight+15)+")")
        .call(barAxis);
      let bar = legend.append("g").attr("transform","translate("+(20)+","+(0)+")")
      for (let i=0; i<legendWidth-40; i=i+stepSize) {
        bar.append("rect")
          .attr("x", i)
          .attr("y", 5)
          .attr("width", stepSize)
          .attr("height",barHeight)
          .style("fill", legendColorScale( pixelScale(i) )); 
      }
    }
    </script>
    </div>
  </body>
</html>
    
